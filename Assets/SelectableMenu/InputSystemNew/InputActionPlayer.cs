//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/SelectableMenu/InputSystemNew/InputActionPlayer.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionPlayer: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionPlayer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionPlayer"",
    ""maps"": [
        {
            ""name"": ""KeyBoardPlayer"",
            ""id"": ""fca0b6db-6e54-439d-b2d2-a449fe8090c6"",
            ""actions"": [
                {
                    ""name"": ""Select_MouseLeftDown"",
                    ""type"": ""Button"",
                    ""id"": ""01670731-6a8a-4492-8cbc-3ba6ae2fbfd7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4bfa3b59-8a36-4d18-b568-8503022d7cdf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Select_MouseLeftDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TouchPadPlayer"",
            ""id"": ""2bb6da78-c849-4180-9d9d-90da4dbbe2bd"",
            ""actions"": [
                {
                    ""name"": ""Select_TouchPadDown"",
                    ""type"": ""Button"",
                    ""id"": ""5ea4568a-86a6-4c5b-8781-2e50e80f1f18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""de500410-98ed-4cbf-9857-d7533844636a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Select_TouchPadDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard"",
            ""bindingGroup"": ""KeyBoard"",
            ""devices"": []
        }
    ]
}");
        // KeyBoardPlayer
        m_KeyBoardPlayer = asset.FindActionMap("KeyBoardPlayer", throwIfNotFound: true);
        m_KeyBoardPlayer_Select_MouseLeftDown = m_KeyBoardPlayer.FindAction("Select_MouseLeftDown", throwIfNotFound: true);
        // TouchPadPlayer
        m_TouchPadPlayer = asset.FindActionMap("TouchPadPlayer", throwIfNotFound: true);
        m_TouchPadPlayer_Select_TouchPadDown = m_TouchPadPlayer.FindAction("Select_TouchPadDown", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyBoardPlayer
    private readonly InputActionMap m_KeyBoardPlayer;
    private List<IKeyBoardPlayerActions> m_KeyBoardPlayerActionsCallbackInterfaces = new List<IKeyBoardPlayerActions>();
    private readonly InputAction m_KeyBoardPlayer_Select_MouseLeftDown;
    public struct KeyBoardPlayerActions
    {
        private @InputActionPlayer m_Wrapper;
        public KeyBoardPlayerActions(@InputActionPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select_MouseLeftDown => m_Wrapper.m_KeyBoardPlayer_Select_MouseLeftDown;
        public InputActionMap Get() { return m_Wrapper.m_KeyBoardPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyBoardPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IKeyBoardPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyBoardPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyBoardPlayerActionsCallbackInterfaces.Add(instance);
            @Select_MouseLeftDown.started += instance.OnSelect_MouseLeftDown;
            @Select_MouseLeftDown.performed += instance.OnSelect_MouseLeftDown;
            @Select_MouseLeftDown.canceled += instance.OnSelect_MouseLeftDown;
        }

        private void UnregisterCallbacks(IKeyBoardPlayerActions instance)
        {
            @Select_MouseLeftDown.started -= instance.OnSelect_MouseLeftDown;
            @Select_MouseLeftDown.performed -= instance.OnSelect_MouseLeftDown;
            @Select_MouseLeftDown.canceled -= instance.OnSelect_MouseLeftDown;
        }

        public void RemoveCallbacks(IKeyBoardPlayerActions instance)
        {
            if (m_Wrapper.m_KeyBoardPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyBoardPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyBoardPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyBoardPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyBoardPlayerActions @KeyBoardPlayer => new KeyBoardPlayerActions(this);

    // TouchPadPlayer
    private readonly InputActionMap m_TouchPadPlayer;
    private List<ITouchPadPlayerActions> m_TouchPadPlayerActionsCallbackInterfaces = new List<ITouchPadPlayerActions>();
    private readonly InputAction m_TouchPadPlayer_Select_TouchPadDown;
    public struct TouchPadPlayerActions
    {
        private @InputActionPlayer m_Wrapper;
        public TouchPadPlayerActions(@InputActionPlayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select_TouchPadDown => m_Wrapper.m_TouchPadPlayer_Select_TouchPadDown;
        public InputActionMap Get() { return m_Wrapper.m_TouchPadPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchPadPlayerActions set) { return set.Get(); }
        public void AddCallbacks(ITouchPadPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchPadPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchPadPlayerActionsCallbackInterfaces.Add(instance);
            @Select_TouchPadDown.started += instance.OnSelect_TouchPadDown;
            @Select_TouchPadDown.performed += instance.OnSelect_TouchPadDown;
            @Select_TouchPadDown.canceled += instance.OnSelect_TouchPadDown;
        }

        private void UnregisterCallbacks(ITouchPadPlayerActions instance)
        {
            @Select_TouchPadDown.started -= instance.OnSelect_TouchPadDown;
            @Select_TouchPadDown.performed -= instance.OnSelect_TouchPadDown;
            @Select_TouchPadDown.canceled -= instance.OnSelect_TouchPadDown;
        }

        public void RemoveCallbacks(ITouchPadPlayerActions instance)
        {
            if (m_Wrapper.m_TouchPadPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchPadPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchPadPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchPadPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchPadPlayerActions @TouchPadPlayer => new TouchPadPlayerActions(this);
    private int m_KeyBoardSchemeIndex = -1;
    public InputControlScheme KeyBoardScheme
    {
        get
        {
            if (m_KeyBoardSchemeIndex == -1) m_KeyBoardSchemeIndex = asset.FindControlSchemeIndex("KeyBoard");
            return asset.controlSchemes[m_KeyBoardSchemeIndex];
        }
    }
    public interface IKeyBoardPlayerActions
    {
        void OnSelect_MouseLeftDown(InputAction.CallbackContext context);
    }
    public interface ITouchPadPlayerActions
    {
        void OnSelect_TouchPadDown(InputAction.CallbackContext context);
    }
}
